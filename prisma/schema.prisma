generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  usernameHash  String @unique
  passwordProof String
  masterKeyPK   String

  sessions                             Session[]
  correspondenceRequests               ServiceCorrespondenceRequest[]
  individualLv1BCorrespondenceRequests IndividualLv1BCorrespondenceRequest[]
  individualLv2BCorrespondenceRequests IndividualLv2BCorrespondenceRequest[]
  individualLv2ACorrespondenceRequests IndividualLv2ACorrespondenceRequest[]
  individualLv3ACorrespondenceRequests IndividualLv3ACorrespondenceRequest[]
  exchanges                            Exchange[]
  messages                             Message[]
  notifications                        Notification[]
  files                                File[]
}

model Correspondence {
  id String @id @default(uuid())

  accessToken String @unique // Generated by server

  isService Boolean
  // TODO: permissions

  correspondenceKeyMK   String
  correspondenceKeyMKIV String
  displayNameCK         String
  displayNameCKIV       String

  exchanges Exchange[]
}

model ServiceCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id])
  forUserId String

  serverUrl               String
  correspondenceRequestId String @unique // Generated by server

  correspondenceKeySPK  String
  correspondenceKeyMK   String
  correspondenceKeyMKIV String
}

model IndividualLv1BCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id])
  forUserId String

  correspondenceInitID String // Generated by server
  correspondenceCode   String // Generated by server

  correspondenceInitPublicKey String

  correspondenceInitPrivateKeyMK   String
  correspondenceInitPrivateKeyMKIV String

  into IndividualLv2BCorrespondenceRequest?
}

model IndividualLv2BCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id])
  forUserId String

  from   IndividualLv1BCorrespondenceRequest @relation(fields: [fromId], references: [id])
  fromId String                              @unique

  serverUrl String

  correspondenceInitID String // Generated by server

  userDisplayNameCK   String
  userDisplayNameCKIV String

  correspondenceKeyCIPK   String
  correspondenceKeyCIPKIV String
}

model IndividualLv2ACorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id])
  forUserId String

  serverUrl String

  correspondenceInitID String // Generated by server

  correspondenceKeyMK   String
  correspondenceKeyMKIV String

  into IndividualLv3ACorrespondenceRequest?
}

model IndividualLv3ACorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id])
  forUserId String

  from   IndividualLv2ACorrespondenceRequest @relation(fields: [fromId], references: [id])
  fromId String                              @unique

  userDisplayNameCK   String
  userDisplayNameCKIV String
}

model Exchange {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  correspondence   Correspondence @relation(fields: [correspondenceId], references: [id])
  correspondenceId String
}

model Message {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  isImportant Boolean

  titleCK   String
  titleCKIV String

  categoryCK   String
  categoryCKID String

  bodyCK   String
  bodyCKIV String

  files File[]
}

model Notification {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  isImportant Boolean

  titleCK   String
  titleCKIV String

  categoryCK   String
  categoryCKID String

  bodyCK   String
  bodyCKIV String

  files File[]
}

model File {
  id      String @id @default(uuid())
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  contentCK   String
  contentCKIV String

  fromMessage   Message? @relation(fields: [fromMessageID], references: [id])
  fromMessageID String?

  fromNotification   Notification? @relation(fields: [fromNotificationId], references: [id])
  fromNotificationId String?
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  accessToken String @unique
}
