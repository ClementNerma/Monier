generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  usernameHash String @unique

  passwordSalt String

  passwordProofPlainText String
  passwordProofPK        String
  passwordProofPKIV      String

  masterKeyPK   String
  masterKeyPKIV String

  displayNameMK   String
  displayNameMKIV String

  sessions Session[]

  correspondents Correspondent[]

  exchanges     Exchange[]
  notifications Notification[]

  files File[]

  correspondenceRequests               ServiceCorrespondenceRequest[]
  individualLv1BCorrespondenceRequests IndividualLv1BCorrespondenceRequest[]
  individualLv2BCorrespondenceRequests IndividualLv2BCorrespondenceRequest[]
  individualLv2ACorrespondenceRequests IndividualLv2ACorrespondenceRequest[]
  individualLv3ACorrespondenceRequests IndividualLv3ACorrespondenceRequest[]
  individualLv3BCorrespondenceRequests IndividualLv3BCorrespondenceRequest[]
}

model ServiceCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  serverUrl               String
  correspondenceRequestId String @unique // Generated by server

  correspondenceKeySPK  String
  correspondenceKeyMK   String
  correspondenceKeyMKIV String
}

model IndividualLv1BCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  correspondenceCode   String @unique // Generated by server
  correspondenceInitID String @unique // Generated by server

  correspondenceInitPublicKeyJWK String

  correspondenceInitPrivateKeyMK   String
  correspondenceInitPrivateKeyMKIV String

  into IndividualLv2BCorrespondenceRequest?
}

model IndividualLv2BCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  from   IndividualLv1BCorrespondenceRequest @relation(fields: [fromId], references: [id], onDelete: Cascade)
  fromId String                              @unique

  serverUrl String

  targetDisplayNameCK   String
  targetDisplayNameCKIV String

  correspondenceKeyCIPK String

  into IndividualLv3BCorrespondenceRequest?
}

model IndividualLv3BCorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  from   IndividualLv2BCorrespondenceRequest @relation(fields: [fromId], references: [id], onDelete: Cascade)
  fromId String                              @unique

  correspondenceKeyMK   String
  correspondenceKeyMKIV String
}

model IndividualLv2ACorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  serverUrl String

  correspondenceInitID String @unique // Generated by server

  correspondenceKeyMK   String
  correspondenceKeyMKIV String

  into IndividualLv3ACorrespondenceRequest?
}

model IndividualLv3ACorrespondenceRequest {
  id        String @id @default(uuid())
  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  from   IndividualLv2ACorrespondenceRequest @relation(fields: [fromId], references: [id], onDelete: Cascade)
  fromId String                              @unique

  initiatorDisplayNameCK   String
  initiatorDisplayNameCKIV String
}

model Correspondent {
  id String @id @default(uuid())

  forUser   User   @relation(fields: [forUserId], references: [id], onDelete: Cascade)
  forUserId String

  incomingAccessToken String @unique // Generated by server
  outgoingAccessToken String @unique // Generated by server

  isService   Boolean
  isInitiator Boolean

  serverUrl String

  // TODO: permissions

  correspondenceKeyMK   String
  correspondenceKeyMKIV String
  displayNameCK         String
  displayNameCKIV       String

  exchanges Exchange[]
}

model Exchange {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  exchangeId String @unique // Generated by server

  correspondent   Correspondent @relation(fields: [correspondentId], references: [id], onDelete: Cascade)
  correspondentId String

  messsages Message[]
}

model Message {
  id String @id @default(uuid())

  exchange   Exchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  exchangeId String

  createdAt DateTime @default(now())

  isImportant Boolean

  titleCK   String
  titleCKIV String

  categoryCK   String
  categoryCKIV String

  bodyCK   String
  bodyCKIV String

  files File[]
}

model Notification {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  isImportant Boolean

  titleCK   String
  titleCKIV String

  categoryCK   String
  categoryCKIV String

  bodyCK   String
  bodyCKIV String

  files File[]
}

model File {
  id      String @id @default(uuid())
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  contentCK   String
  contentCKIV String

  fromMessage   Message? @relation(fields: [fromMessageID], references: [id], onDelete: Cascade)
  fromMessageID String?

  fromNotification   Notification? @relation(fields: [fromNotificationId], references: [id], onDelete: Cascade)
  fromNotificationId String?
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  accessToken String @unique
}
